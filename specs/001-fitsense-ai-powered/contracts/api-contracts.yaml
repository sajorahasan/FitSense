openapi: 3.0.3
info:
  title: FitSense API
  description: RESTful API contracts for FitSense AI-powered wellness app
  version: 1.0.0
  contact:
    name: FitSense Development Team

servers:
  - url: https://api.fitsense.com/v1
    description: Production server
  - url: https://staging-api.fitsense.com/v1
    description: Staging server
  - url: http://localhost:3210/v1
    description: Local development server

security:
  - BearerAuth: []

paths:
  # User Profile Management
  /users/profile:
    get:
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      tags: [Users]
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update user profile
      description: Update the authenticated user's profile information
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserProfileUpdate'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Workout Management
  /workouts:
    post:
      summary: Create workout session
      description: Create a new workout session for the authenticated user
      tags: [Workouts]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSessionCreate'
      responses:
        '201':
          description: Workout session created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List workout sessions
      description: Retrieve workout sessions for the authenticated user
      tags: [Workouts]
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Workout sessions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  workouts:
                    type: array
                    items:
                      $ref: '#/components/schemas/WorkoutSession'
                  total:
                    type: integer
                  has_more:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workouts/{workoutId}:
    get:
      summary: Get workout session
      description: Retrieve a specific workout session
      tags: [Workouts]
      security:
        - BearerAuth: []
      parameters:
        - name: workoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Workout session retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update workout session
      description: Update a specific workout session
      tags: [Workouts]
      security:
        - BearerAuth: []
      parameters:
        - name: workoutId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkoutSessionUpdate'
      responses:
        '200':
          description: Workout session updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkoutSession'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete workout session
      description: Delete a specific workout session
      tags: [Workouts]
      security:
        - BearerAuth: []
      parameters:
        - name: workoutId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Workout session deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Meal Management
  /meals:
    post:
      summary: Create meal entry
      description: Create a new meal entry for the authenticated user
      tags: [Meals]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MealEntryCreate'
      responses:
        '201':
          description: Meal entry created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MealEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List meal entries
      description: Retrieve meal entries for the authenticated user
      tags: [Meals]
      security:
        - BearerAuth: []
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: date
          in: query
          schema:
            type: string
            format: date
        - name: type
          in: query
          schema:
            type: string
            enum: [breakfast, lunch, dinner, snack, drink]
      responses:
        '200':
          description: Meal entries retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  meals:
                    type: array
                    items:
                      $ref: '#/components/schemas/MealEntry'
                  total:
                    type: integer
                  has_more:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # AI Insights
  /insights:
    get:
      summary: Get AI insights
      description: Retrieve AI-generated insights for the authenticated user
      tags: [Insights]
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [workout_analysis, nutrition_review, trend_identification, goal_progress, health_correlation, recommendation]
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 10
      responses:
        '200':
          description: AI insights retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  insights:
                    type: array
                    items:
                      $ref: '#/components/schemas/AIInsight'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /insights/generate:
    post:
      summary: Generate AI insight
      description: Request generation of a new AI insight
      tags: [Insights]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - type
              properties:
                type:
                  type: string
                  enum: [workout_analysis, nutrition_review, trend_identification, goal_progress, health_correlation]
                date_range:
                  type: object
                  properties:
                    start:
                      type: string
                      format: date
                    end:
                      type: string
                      format: date
      responses:
        '202':
          description: AI insight generation started
          content:
            application/json:
              schema:
                type: object
                properties:
                  insight_id:
                    type: string
                  status:
                    type: string
                    enum: [processing]
                  estimated_completion:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          description: Too many requests
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Chat Assistant
  /chat/messages:
    post:
      summary: Send chat message
      description: Send a message to the AI chat assistant
      tags: [Chat]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - message
              properties:
                message:
                  type: string
                  maxLength: 1000
                context:
                  type: object
                  properties:
                    current_view:
                      type: string
                    recent_actions:
                      type: array
                      items:
                        type: string
      responses:
        '200':
          description: Chat response generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '429':
          description: Too many requests
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Goals Management
  /goals:
    post:
      summary: Create goal
      description: Create a new goal for the authenticated user
      tags: [Goals]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GoalCreate'
      responses:
        '201':
          description: Goal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List goals
      description: Retrieve goals for the authenticated user
      tags: [Goals]
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, completed, paused, cancelled]
      responses:
        '200':
          description: Goals retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  goals:
                    type: array
                    items:
                      $ref: '#/components/schemas/Goal'
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /goals/{goalId}/progress:
    post:
      summary: Update goal progress
      description: Update progress for a specific goal
      tags: [Goals]
      security:
        - BearerAuth: []
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - current_value
              properties:
                current_value:
                  type: number
                notes:
                  type: string
                  maxLength: 500
      responses:
        '200':
          description: Goal progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Health Metrics
  /metrics:
    post:
      summary: Record health metric
      description: Record a new health metric for the authenticated user
      tags: [Metrics]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HealthMetricCreate'
      responses:
        '201':
          description: Health metric recorded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthMetric'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

    get:
      summary: List health metrics
      description: Retrieve health metrics for the authenticated user
      tags: [Metrics]
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          schema:
            type: string
            enum: [weight, heart_rate, blood_pressure, sleep, steps, body_fat, blood_sugar, temperature, oxygen_saturation, stress_level]
        - name: start_date
          in: query
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          schema:
            type: string
            format: date
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        '200':
          description: Health metrics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      $ref: '#/components/schemas/HealthMetric'
                  total:
                    type: integer
                  has_more:
                    type: boolean
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # User schemas
    UserProfile:
      type: object
      properties:
        id:
          type: string
        email:
          type: string
          format: email
        display_name:
          type: string
        avatar:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
        fitness_level:
          type: string
          enum: [beginner, intermediate, advanced]
        primary_goal:
          type: string
          enum: [weight_loss, muscle_gain, maintenance, endurance, health_management]
        health_conditions:
          type: array
          items:
            type: string
        privacy_level:
          type: string
          enum: [private, friends_only, public]

    UserProfileUpdate:
      type: object
      properties:
        display_name:
          type: string
        fitness_level:
          type: string
          enum: [beginner, intermediate, advanced]
        primary_goal:
          type: string
          enum: [weight_loss, muscle_gain, maintenance, endurance, health_management]
        health_conditions:
          type: array
          items:
            type: string
        privacy_level:
          type: string
          enum: [private, friends_only, public]

    # Workout schemas
    WorkoutSession:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [cardio, strength, flexibility, sports, other]
        start_time:
          type: string
          format: date-time
        end_time:
          type: string
          format: date-time
        duration:
          type: integer
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExerciseEntry'
        mood:
          type: string
          enum: [terrible, poor, okay, good, excellent]
        notes:
          type: string

    WorkoutSessionCreate:
      type: object
      required:
        - name
        - type
        - start_time
      properties:
        name:
          type: string
        type:
          type: string
          enum: [cardio, strength, flexibility, sports, other]
        start_time:
          type: string
          format: date-time
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExerciseEntry'
        mood:
          type: string
          enum: [terrible, poor, okay, good, excellent]
        notes:
          type: string

    WorkoutSessionUpdate:
      type: object
      properties:
        name:
          type: string
        end_time:
          type: string
          format: date-time
        exercises:
          type: array
          items:
            $ref: '#/components/schemas/ExerciseEntry'
        mood:
          type: string
          enum: [terrible, poor, okay, good, excellent]
        notes:
          type: string

    ExerciseEntry:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        category:
          type: string
        sets:
          type: array
          items:
            $ref: '#/components/schemas/SetEntry'
        duration:
          type: integer
        distance:
          type: number

    SetEntry:
      type: object
      properties:
        reps:
          type: integer
        weight:
          type: number
        duration:
          type: integer
        rest_time:
          type: integer
        completed:
          type: boolean

    # Meal schemas
    MealEntry:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
          enum: [breakfast, lunch, dinner, snack, drink]
        meal_time:
          type: string
          format: date-time
        foods:
          type: array
          items:
            $ref: '#/components/schemas/FoodItem'
        total_nutrition:
          $ref: '#/components/schemas/NutritionalInfo'
        photo_urls:
          type: array
          items:
            type: string
            format: uri

    MealEntryCreate:
      type: object
      required:
        - type
        - meal_time
        - foods
      properties:
        name:
          type: string
        type:
          type: string
          enum: [breakfast, lunch, dinner, snack, drink]
        meal_time:
          type: string
          format: date-time
        foods:
          type: array
          items:
            $ref: '#/components/schemas/FoodItem'
        photo_urls:
          type: array
          items:
            type: string
            format: uri

    FoodItem:
      type: object
      required:
        - name
        - quantity
        - unit
      properties:
        name:
          type: string
        quantity:
          type: number
        unit:
          type: string
        nutrition:
          $ref: '#/components/schemas/NutritionalInfo'

    NutritionalInfo:
      type: object
      properties:
        calories:
          type: number
        protein:
          type: number
        carbs:
          type: number
        fat:
          type: number
        fiber:
          type: number
        sugar:
          type: number

    # AI Insight schemas
    AIInsight:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [workout_analysis, nutrition_review, trend_identification, goal_progress, health_correlation, recommendation]
        title:
          type: string
        summary:
          type: string
        detailed_analysis:
          type: string
        recommendations:
          type: array
          items:
            $ref: '#/components/schemas/Recommendation'
        confidence:
          type: number
          minimum: 0
          maximum: 1
        created_at:
          type: string
          format: date-time

    Recommendation:
      type: object
      properties:
        type:
          type: string
          enum: [workout, meal, lifestyle, goal_adjustment]
        title:
          type: string
        description:
          type: string
        priority:
          type: string
          enum: [low, medium, high]

    # Chat schemas
    ChatResponse:
      type: object
      properties:
        message_id:
          type: string
        response:
          type: string
        suggestions:
          type: array
          items:
            type: string
        follow_up_questions:
          type: array
          items:
            type: string

    # Goal schemas
    Goal:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [weight, fitness, nutrition, health, custom]
        target_value:
          type: number
        target_unit:
          type: string
        current_value:
          type: number
        status:
          type: string
          enum: [active, completed, paused, cancelled]
        created_at:
          type: string
          format: date-time
        target_date:
          type: string
          format: date

    GoalCreate:
      type: object
      required:
        - title
        - category
        - target_value
        - target_unit
        - target_date
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: [weight, fitness, nutrition, health, custom]
        target_value:
          type: number
        target_unit:
          type: string
        target_date:
          type: string
          format: date

    # Health Metric schemas
    HealthMetric:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [weight, heart_rate, blood_pressure, sleep, steps, body_fat, blood_sugar, temperature, oxygen_saturation, stress_level]
        value:
          type: number
        unit:
          type: string
        timestamp:
          type: string
          format: date-time
        quality:
          type: string
          enum: [poor, fair, good, excellent]

    HealthMetricCreate:
      type: object
      required:
        - type
        - value
        - unit
        - timestamp
      properties:
        type:
          type: string
          enum: [weight, heart_rate, blood_pressure, sleep, steps, body_fat, blood_sugar, temperature, oxygen_saturation, stress_level]
        value:
          type: number
        unit:
          type: string
        timestamp:
          type: string
          format: date-time
        quality:
          type: string
          enum: [poor, fair, good, excellent]
        systolic:
          type: number
        diastolic:
          type: number

  responses:
    BadRequest:
      description: Bad request - invalid input parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
              details:
                type: object

    Unauthorized:
      description: Authentication required or invalid token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: unauthorized
              message:
                type: string
                example: Authentication required

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: not_found
              message:
                type: string
                example: Resource not found

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: internal_server_error
              message:
                type: string
                example: An unexpected error occurred
